# 多路复用IO
最适用的是高并发场景，所谓的高并发就是指在1ms内至少同时有1000+个请求准备好。其他情况下，多路复用发挥不出来作用，
    但是使用Java NIO 进行功能实现，比传统的Socket编程实现更加复杂一些，所以在实际的应用中，需要根据自己的业务场景进行技术选择。

# NIO
实际上，“旧”的I/O包已经使用NIO重新实现过，即使我们不显式的使用NIO编程，也能从中受益。
NIO我们一般认为是New I/O（也是官方的叫法），因为它是相对于老的I/O类库新增的。但民间跟多人称之为Non-block I/O，即非阻塞I/O，因为这样叫，更能体现它的特点。

1. 涉及概念：
(1) Selector 选择器
(2) SelectableChannel
(3) Register
(4) OS内核，反馈事件：select  poll  epoll  kqueue

2. 与BIO的区别：
(1)IO面向流，NIO面向缓冲区（面向块，比流处理快的多，缓冲区内可以前后移动的处理，只需要确保不去覆盖尚未处理的数据）。
(2)非阻塞IO，
    .读：线程从某个Channel读取数据，如果目前没有可用数据，就什么也不获取，而不是阻塞线程，直到有可用数据，这个线程都可以做别的事情。
    .写：线程把数据写入一个Channel，不必等完全写入，这个线程可以去做别的事情。
    == 非阻塞IO的空闲时间一般用于去其他Channel上执行IO操作，所以一个线程可以管理多个IO的Channel

3. 通道Channel，对流的模拟，可以通过Channel读取和写入数据，但是Channel可以双向读写。
(1)FileChannel：从文件中读写数据；
(2)DatagramChannel：通过 UDP 读写网络中数据；
(3)SocketChannel：通过 TCP 读写网络中数据；
(4)ServerSocketChannel：可以监听新进来的 TCP 连接，对每一个新进来的连接都会创建一个 SocketChannel。

4. 缓冲区：
(1)从一个Channel中读写数据，必须经过缓冲区。
(2)缓冲区还提供对数据的结构化访问，跟踪系统的读写过程。
(3)缓冲区有两种工作模式：
    .读：读的时候，不能写
    .写：写的时候，可以读，所以可能出现脏读
(4)ServerSocketChannel通道它只支持对OP_ACCEPT事件的监听，所以它是不能直接进行网络数据内容的读写的。所以ServerSocketChannel是没有集成Buffer的。
(5)缓冲区类型：
    ByteBuffer
    CharBuffer
    ShortBuffer
    IntBuffer
    LongBuffer
    FloatBuffer
    DoubleBuffer
    .缓冲区的状态：（底层就是数组）
        . position 标识读写位置
        . limit 标识channel中可以读写的数据的最大位置
        . capacity 标识缓冲区最大数据容量


# Demo
1. FileChannel
2. TCP
当多个客户端通过通道向服务端传输数据时，是通过 ByteBuffer 来传输，一个文件通过多次，从输入通道中读取 N 个字节数据写入ByteBuffer，
然后再将将缓冲区的数据写到输出通道，这个过程可以看成是不连续的，
因为只有当缓冲区写满后，通过 buffer.flip() 切换成读模式后，才开始向输出通道写入，
所以当ByteBuffer还在写入状态时，服务器是不会等待这个通道的ByteBuffer写满，而是去处理其他客户端Channel 为可读的状态，
当然这个处理业务的工作可以开启多线程来处理。
3. UDP

# 结论：
1. 使用NIO处理IO，而不是多线程，但是业务处理还是可以引入线程池技术的
2. 同一个端口可以处理多种协议，例如，使用ServerSocketChannel的服务器端口监听，既可以处理TCP协议又可以处理UDP协议。
3. OS级别的优化：多路复用IO技术可以是操作系统级别在一个端口上能够同时接受多个客户端的IO事件。同时具有之前我们讲到的阻塞式同步IO和非阻塞式同步IO的所有特点。Selector的一部分作用更相当于“轮询代理器”。